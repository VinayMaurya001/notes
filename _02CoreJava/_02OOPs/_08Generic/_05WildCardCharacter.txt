Wild Card Character(?)
The question mark (?) is known as the wildcard in generic programming . 
It represents an unknown type. 
The wildcard can be used in a variety of situations such as the type of a parameter, field, or local variable; 
sometimes as a return type(though it is better programming practice to be more specific). 
Unlike arrays, different instantiations of a generic type are not compatible with each other, not even explicitly. 
This incompatibility may be softened by the wildcard if ? is used as an actual type parameter.
 
 The wildcard is never used as a type argument for a generic method invocation, a generic class instance creation, or a supertype.


Types of wildcards in Java:
	Upper Bounded Wildcards
	Lower Bounded Wildcards
	Unbounded Wildcard
	
Upper Bounded Wildcards:
These wildcards can be used when you want to relax the restrictions on a variable. 
For example, say you want to write a method that works on List < Integer >, List < double >, 
	and List < number > , you can do this  using an upper bounded wildcard.
To declare an upper-bounded wildcard, use the wildcard character (?), 
	followed by the extends keyword, followed by its upper bound.
public static void process(List<? extends Foo> list) {
    for (Foo elem : list) {
        // ...
    }
}
In the foreach clause, the elem variable iterates over each element in the list. 
Any method defined in the Foo class can now be used on elem.


Lower Bounded Wildcards: 
It is expressed using the wildcard character (?), followed by the super keyword, followed by its lower bound: <? super A>.
Syntax: Collectiontype <? super A>

Use extend wildcard when you want to get values out of a structure and super wildcard when you put values in a structure. 
Don't use wildcard when you get and put values in a structure.
Note: You can specify an upper bound for a wildcard, or you can specify a lower bound, but you cannot specify both.

Unbounded Wildcard: 
The unbounded wildcard type is specified using the wildcard character (?), for example, List<?>. 
This is called a list of unknown type. There are two scenarios where an unbounded wildcard is a useful approach:
If you are writing a method that can be implemented using functionality provided in the Object class.
When the code is using methods in the generic class that don't depend on the type parameter. 
For example, List.size or List.clear. 
In fact, Class<?> is so often used because most of the methods in Class<T> do not depend on T.
Consider the following method, printList:

public static void printList(List<Object> list) {
    for (Object elem : list)
        System.out.println(elem + " ");
    System.out.println();
}
The goal of printList is to print a list of any type, but it fails to achieve that goal,
	it prints only a list of Object instances; it cannot print List<Integer>, List<String>, List<Double>, and so on, 
	because they are not subtypes of List<Object>. 
To write a generic printList method, use List<?>:
public static void printList(List<?> list) {
    for (Object elem: list)
        System.out.print(elem + " ");
    System.out.println();
}

Psv m1(ArrayList<String> l){} (Pronounced as M1 of ArrayList of String l)
Psv m1(ArrayList<?> l0){}
Psv m1(ArrayList<? extends Number> l0){}
Psv m1(ArrayList<? super Number> l0){} 

Wild Card Character(?)
1)private static void m1(ArrayList<String> l0)//(Pronounced as m1 of ArrayList of String l0)
  {
    l0.add("Sachin");
  }
   ArrayList<String> l0=new ArrayList<String>(); m1(l0);
   ArrayList<Integer> l0=new ArrayList<Integer>(); m1(l0);//CTE,Invalid
  
2)private static void m1(ArrayList<?> l0) {}
  ArrayList<Double> l0=new ArrayList<String>(); m1(l0);
  ArrayList<Integer> l0=new ArrayList<Integer>(); m1(l0);
  
3)private static void m1(ArrayList<? extends Number> l0) {  }
  ArrayList<String> l0=new ArrayList<String>(); m1(l0);//CTE
  ArrayList<Integer> l0=new ArrayList<Integer>(); m1(l0);
  ArrayList<Double> l0=new ArrayList<Double>(); m1(l0);
  ArrayList<Number> l0=new ArrayList<Number>(); m1(l0);
4)private static void m1(ArrayList<? super Number> l0) {}
  ArrayList<String> l0=new ArrayList<String>(); m1(l0);//CTE
  ArrayList<Integer> l0=new ArrayList<Integer>(); m1(l0);//CTE
  ArrayList<Double> l0=new ArrayList<Double>(); m1(l0);//CTE
  ArrayList<Number> l0=new ArrayList<Number>(); m1(l0);
  ArrayList<Object> l0=new ArrayList<Object>(); m1(l0);

ArrayList<Student> l0=new ArrayList<Student>();M1(l0);  
Psv m1(ArrayList<? super Number> l0){} //valid  ????????

5)
ArrayList<Student> l0=new ArrayList<Student>();M1(l0);
private static void m1(ArrayList<?> l0) {
    l0.add(null);
    l0.add("Sachin");//CTE
}
//Within method we cann't add anything to the list except null because we don't know the type exactly. 
  Null is allowed because it is valid value for anytype.
These type of methods are best suitable for read-only operation.

6)
Psv m1(ArrayList<? Extends x> l0)
{
//within the method we cann’t add anything to the list except null because we don’t know the type of x exactly. 
This type of methods are also best suitable for read only operation.
}
X can be either class or interface. 
If x is a class then we can call this method by passing ArrayList of either X type or its child classes. 
If x is an interface then we can call this method by passing ArrayList of either X type or its implementation classes.

4)    ArrayList<Number> l0=new ArrayList<Number>(); m1(l0);

private static void m1(ArrayList<? super Integer> l0) {
    l0.add(null);
    l0.add((Integer) new Object());//CTE
  }
// within the method we can add x type of object nd null to the list.
X can be either class or interface.
If x is a class then we can call this method by passing arraylist of either x type or its super classes.
If x is an interface then we can call this method by passing arraylist of either x type or super class of implementation class of x.  



ArrayList<String> al=new ArrayList<String>();
ArrayList<?> al=new ArrayList<String>();
ArrayList<?> al=new ArrayList<Integer>();
ArrayList<? extends Number> al=new ArrayList<Integer>();
ArrayList<? extends Number> al=new ArrayList<String>();// invalid
ArrayList<? super String> al=new ArrayList<Object>();

ArrayList<?> al=new ArrayList<?>(); //invalid
ArrayList<?> al=new ArrayList<? Extends Number>();//invalid

Upper Bounded Wildcard

Lower Bounded Wildcard
Say you want to write a method that puts Integer objects into a list. 
To maximize flexibility, you would like the method to work on List<Integer>, List<Number>, and List<Object>  anything that can hold Integer values.
To write the method that works on lists of Integer and the supertypes of Integer, such as Integer, Number, and Object, 
you would specify List<? super Integer>. 
The term List<Integer> is more restrictive than List<? super Integer> because the former matches a list of type Integer only, 
whereas the latter matches a list of any type that is a supertype of Integer.
The following code adds the numbers 1 through 10 to the end of a list:
public static void addNumbers(List<? super Integer> list) {
    for (int i = 1; i <= 10; i++) {
        list.add(i);
    }
}
The Guidelines for Wildcard Use section provides guidance on when to use upper bounded wildcards and when to use lower bounded wildcards.

        
It's important to note that List<Object> and List<?> are not the same. 
You can insert an Object, or any subtype of Object, into a List<Object>. 
But you can only insert null into a List<?>. 
The Guidelines for Wildcard Use section has more information on how to determine what kind of wildcard, 
	if any, should be used in a given situation.


Note: You can specify an upper bound for a wildcard, or you can specify a lower bound, but you cannot specify both.




Wildcards and Subtyping
As described in Generics, Inheritance, and Subtypes, generic classes or interfaces are not related merely 
	because there is a relationship between their types. 
However, you can use wildcards to create a relationship between generic classes or interfaces.

Although Integer is a subtype of Number, List<Integer> is not a subtype of List<Number> and, in fact, these two types are not related. 
The common parent of List<Number> and List<Integer> is List<?>.


In order to create a relationship between these classes so that 
	the code can access Number's methods through List<Integer>'s elements, use an upper bounded wildcard:
List<? extends Integer> intList = new ArrayList<>();
List<? extends Number>  numList = intList;  // OK. List<? extends Integer> is a subtype of List<? extends Number>
Because Integer is a subtype of Number, and numList is a list of Number objects, 
	a relationship now exists between intList (a list of Integer objects) and numList.
	
diagram showing that List<Integer> is a subtype of both List<? extends Integer> and List<?super Integer>. 
List<? extends Integer> is a subtype of List<? extends Number> which is a subtype of List<?>. 
List<Number> is a subtype of List<? super Number> and List>? extends Number>. 
List<? super Number> is a subtype of List<? super Integer> which is a subtype of List<?>.
A hierarchy of several generic List class declarations.
The Guidelines for Wildcard Use section has more information about the ramifications of using upper and lower bounded wildcards.


Wildcard Capture and Helper Methods
In some cases, the compiler infers the type of a wildcard. 
For example, a list may be defined as List<?> but, when evaluating an expression, the compiler infers a particular type from the code. 
This scenario is known as wildcard capture.

For the most part, you don't need to worry about wildcard capture, except when you see an error message 
that contains the phrase "capture of".

The WildcardError example produces a capture error when compiled:

import java.util.List;

public class WildcardError {

    void foo(List<?> i) {
        i.set(0, i.get(0));
    }
}
In this example, the compiler processes the i input parameter as being of type Object. 
When the foo method invokes List.set(int, E), the compiler is not able to confirm the type of object 
that is being inserted into the list, and an error is produced. 
When this type of error occurs it typically means that the compiler believes 
that you are assigning the wrong type to a variable. Generics were added to the Java language 
for this reason — to enforce type safety at compile time.

The WildcardError example generates the following error when compiled by Oracle's JDK 7 javac implementation:

WildcardError.java:6: error: method set in interface List<E> cannot be applied to given types;
    i.set(0, i.get(0));
     ^
  required: int,CAP#1
  found: int,Object
  reason: actual argument Object cannot be converted to CAP#1 by method invocation conversion
  where E is a type-variable:
    E extends Object declared in interface List
  where CAP#1 is a fresh type-variable:
    CAP#1 extends Object from capture of ?
1 error
In this example, the code is attempting to perform a safe operation, so how can you work around the compiler error? You can fix it by writing a private helper method which captures the wildcard. In this case, you can work around the problem by creating the private helper method, fooHelper, as shown in WildcardFixed:

public class WildcardFixed {

    void foo(List<?> i) {
        fooHelper(i);
    }


    // Helper method created so that the wildcard can be captured
    // through type inference.
    private <T> void fooHelper(List<T> l) {
        l.set(0, l.get(0));
    }

}
Thanks to the helper method, the compiler uses inference to determine that T is CAP#1, the capture variable, in the invocation. The example now compiles successfully.

By convention, helper methods are generally named originalMethodNameHelper.

https://docs.oracle.com/javase/tutorial/java/generics/capture.html


Guidelines for Wildcard Use
https://docs.oracle.com/javase/tutorial/java/generics/wildcardGuidelines.html
An "in" variable is defined with an upper bounded wildcard, using the extends keyword.
An "out" variable is defined with a lower bounded wildcard, using the super keyword.
In the case where the "in" variable can be accessed using methods defined in the Object class, use an unbounded wildcard.
In the case where the code needs to access the variable as both an "in" and an "out" variable, do not use a wildcard.