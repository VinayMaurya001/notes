Type Erasure
https://docs.oracle.com/javase/tutorial/java/generics/erasure.html
Generics were introduced to the Java language to provide tighter type checks at compile time and to support generic programming. 
To implement generics, the Java compiler applies type erasure to:
	Replace all type parameters in generic types with their bounds or Object if the type parameters are unbounded. 
		The produced bytecode, therefore, contains only ordinary classes, interfaces, and methods.
	Insert type casts if necessary to preserve type safety.
	Generate bridge methods to preserve polymorphism in extended generic types.
Type erasure ensures that no new classes are created for parameterized types; consequently, generics incur no runtime overhead.

Erasure of Generic Types
	During the type erasure process, the Java compiler erases all type parameters and 
	replaces each with its first bound if the type parameter is bounded, or Object if the type parameter is unbounded.

Erasure of Generic Methods

Effects of Type Erasure and Bridge Methods

https://docs.oracle.com/javase/tutorial/java/generics/nonReifiableVarargsType.html
Non-Reifiable Types
Heap Pollution
Potential Vulnerabilities of Varargs Methods with Non-Reifiable Formal Parameters
Preventing Warnings from Varargs Methods with Non-Reifiable Formal Parameters
