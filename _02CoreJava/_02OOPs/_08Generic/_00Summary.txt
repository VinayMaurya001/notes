Introduction

Main objective of generics:
	1)Generics add stability to your code by making more of your bugs detectable at compile time. 	
		to provide Type safety(during insertion) and 
		to resolve type casting problem(during retrival).  
	2)Code Reuse: We can write a method/class/interface once and use for any type we want.
		Implementing generic algorithms: By using generics, we can implement algorithms that work on different types of objects 
			and at the same they are type safe too.  

Collection & Generics
	Polymorphism concept is applicable only for the base type but not for the parameter type(or  type variables)
		Collection<String> l=new ArrayList<String>();
		ArrayList<Object> l=new ArrayList<String>();//CTE, incompatible type
	Collections cannot hold primitive type value.
	Parameter type cannot be primitive type value.
	Type parameters are also called type variables.
	Therefore, the T in Foo<T> is a type parameter and the String in Foo<String>  is a type argument. 
	
The Diamond
In Java SE 7 and later, you can replace the type arguments required to invoke the constructor of a generic class 
	with an empty set of type arguments (<>) as long as the compiler can determine, or infer, the type arguments from the context. 
Box<Integer> integerBox = new Box<>();
	

Parameterized Types
You can also substitute a type parameter (i.e., K or V) with a parameterized type (i.e., List<String>). 
For example, using the OrderedPair<K, V> example:
	OrderedPair<String, Box<Integer>> p = new OrderedPair<>("primes", new Box<Integer>(...));

Raw Types
If the actual type argument is omitted, you create a raw type of Box<T>:
Box rawBox = new Box();
However, a non-generic class or interface type is not a raw type.


Unchecked Error Messages


Parameter type

Bounded Types & Unbounded type
Class A<T extends Number & Runnable & Comparable > {}
	We can bound the type parameter for a particular range using extends keyword. Such types are called bounded types.
Class A<A,B,C> {}
	As the type parameter, we can pass any type and there are no restrictions. And hence it is Unbounded type. 

Generic Methods & Wild Card Character(?)
Psv m1(ArrayList<String> l){} (Pronounced as M1 of ArrayList of String l)
Psv m1(ArrayList<?> l0){}
Psv m1(ArrayList<? extends Number> l0){}
Psv m1(ArrayList<? super Number> l0){} 

Generic Classes
In generic, we are associating a type parameter to  the class. Such type of parameterized classes are
nothing but generic classes or template classes.

Generic class & generic method
We can declare the type parameter , either at class level or at method level.
Declaring type parameter at class level, 
        class Test<T>{}
        We can use T within this class, based on our requirement.
Declaring type parameter at method level (we have to declare type parameter, just before return type).
        class Test<T>{public <T> void m1(T obj){}}
        We can use T within this method, based on our requirement.
Bounded type at method level
        We can define bounded type, even at method level also. 

Communication with non-generic code:
If we send generic object to a non-generic area, then it starts behaving like non-generic object.
If we send non-generic object to a generic area, then it starts behaving like generic object.
That is location in which object present , based on that behaviour will be defined.

Conclusions
The main purpose of generic is to provide type safety and to resolve type casting problems.
Type safety & type casting both are applicable at compile time, hence generic concept is also applicable only at compile time but not at runtime.
Compiler is always going to check only reference type.
JVM is always going to check Runtime object.
At the time of compilation as last step,generic syntax will  be removed and for the jvm, generic syntax won't be available.
Erasure is code , after removing generic.

