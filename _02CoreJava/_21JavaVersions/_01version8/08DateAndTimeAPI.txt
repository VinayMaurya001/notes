Till 1.7V
Date, Calender, TimeStamp

Data & Time API/Joda Time API (1.8v)
	To handle date & time effectively.
	Developed by Joda.org.
	Inside java.time package

Classes
	LocalDate
	LocalTime
	LocalDateTime
	Period
	Year
	ZoneId
	ZoneDateTime

Date and Time API: (Joda-Time API) 
Until Java 1.7version the classes present in Java.util package to handle Date and Time (like Date, Calendar, TimeZoneetc) are 
	not up to the mark with respect to convenience and performance. 
To overcome this problem in the 1.8version oracle people introduced Joda-Time API. 
	This  API developed by joda.org and available in Java in the form of Java.time package. 



What is the feature of the new Date and Time API in Java 8?
Immutable classes and Thread-safe 
Timezone support
Fluent methods for object creation and arithmetic
Addresses I18N issue for earlier APIs
Influenced by popular joda-time package
All packages are based on the ISO-8601 calendar system

What are the important packages for the new Data and Time API?
java.time
dates 
times 
Instants 
durations 
time-zones 
periods
Java.time.format
Java.time.temporal
java.time.zone




LocalDate class
now() are factory methods.
	LocalDate localDate=LocalDate.now();
	System.out.println(localDate);//2018-06-10
	int dd=localDate.getDayOfMonth();
	int mm=localDate.getMonthValue();
	int yyyy=localDate.getYear();
	System.out.println(dd+" "+mm+" "+yyyy);//10 6 2018
	System.out.printf("%d-%d-%d\n",dd,mm,yyyy);//10-6-2018
	System.out.println(localDate.getMonth());//JUNE
	System.out.println(localDate.lengthOfMonth());//30

LocalTime class
	LocalTime localTime=LocalTime.now();
	System.out.println(localTime);//03:50:12.358
	int h=localTime.getHour();
	int m=localTime.getMinute();
	int s=localTime.getSecond();
	int ns=localTime.getNano();
	System.out.println(h+" "+m+" "+s+" "+ns);//4 4 36 154000000
	System.out.printf("%d:%d:%d:%d\n",h,m,s,ns);//4:4:36:154000000
	
LocalDateTime	
	LocalDateTime localDateTime =LocalDateTime.now();
	System.out.println(localDateTime);//2018-06-10
	int dd=localDateTime.getDayOfMonth();
	int mm=localDateTime.getMonthValue();
	int yyyy=localDateTime.getYear();
	System.out.println(dd+" "+mm+" "+yyyy);//10 6 2018
	System.out.printf("%d-%d-%d\n",dd,mm,yyyy);//10-6-2018
	System.out.println(localDateTime.getMonth());//JUNE
	int h=localDateTime.getHour();
	int m=localDateTime.getMinute();
	int s=localDateTime.getSecond();
	int ns=localDateTime.getNano();
	System.out.println(h+" "+m+" "+s+" "+ns);//4 4 36 154000000
	System.out.printf("%d:%d:%d:%d\n",h,m,s,ns);//4:4:36:154000000	
 
	LocalDateTime ldt=localDateTime.of(yyyy,mm,dd,h,m,s,ns);
	System.out.println(ldt);//2018-06-10T04:17:48.598
	LocalDateTime ldt2=localDateTime.of(1998,5,3,3,03);
	System.out.println(ldt2);//1998-05-03T03:03
		
	LocalDateTime ldt3=localDateTime.plusMonths(3);
	System.out.println(ldt3);//2018-09-10T04:22:03.227
	LocalDateTime ldt4=localDateTime.plusMonths(-3);
	System.out.println(ldt4);//2018-03-10T04:22:03.227
	LocalDateTime ldt5=localDateTime.minusMonths(-3);
	System.out.println(ldt5);//2018-09-10T04:22:03.227

Period class
	LocalDate birthday=LocalDate.of(1989,11,24);
	LocalDate today=LocalDate.now();
	Period p=Period.between(birthday, today);
	System.out.printf("Your age is %d years %d months and %d days\n",p.getYears(),p.getMonths(),p.getDays());//Your age is 28 
																								years 6 months and 17 days
		
	LocalDate deathday=LocalDate.of(1989+60,11,24);
	p=Period.between( today,deathday);
	System.out.printf("Your remaining age is %d years %d months and %d days\n",p.getYears(),p.getMonths(),p.getDays());//Your 
																			remaining age is 31 years 5 months and 11 days

	int remainingDays=p.getYears()*365+p.getMonths()*30+p.getDays();
	System.out.printf("You will be on earth only %d days, so hurry up to do important things only.\n",remainingDays);//You 
												will be on earth only 11476 days, so hurry up to do important things only.
		

ZoneId & ZonedDateTime class
To represent the zone.
ZoneId zoneId=ZoneId.systemDefault();
System.out.println(zoneId);//Asia/Calcutta
		
ZoneId zoneIdLA=ZoneId.of("America/Los_Angeles");
ZonedDateTime zonedDateTime=ZonedDateTime.now(zoneIdLA); 
System.out.println(zonedDateTime);//2018-06-09T16:25:02.797-07:00[America/Los_Angeles]
	
Year class
	Scanner sc=new Scanner(System.in);
	System.out.println("Enter year:");
	int y=sc.nextInt();
	Year year=Year.of(y);
	System.out.println(year);
	if(year.isLeap()){
		System.out.println("Leap Year");
	}else{
		System.out.println("Not Leap Year");
	}
	System.out.println();



Java.time.LocalDate
Java.time.LocalTime
Java.time.LocalDateTime
EX: 
program for to display System Date and time. 
1) import Java.time.*;   
2) public class DateTime {   
3)     public static void main(String[] args) {   
4)         LocalDate date = LocalDate.now();   
5)         System.out.println(date);   
6)         LocalTime time=LocalTime.now();   
7)         System.out.println(time);   
8)     }   
9) }   
O/p: 
2015-11-23 	
12:39:26:587 
 
Once we get LocalDate object we can call the following methods on that object to retrieve Day,month and year values separately. 
Ex: 
1) import Java.time.*;   
2) class Test {   
3)           public static void main(String[] args) {   
4)                       LocalDate date = LocalDate.now();   
5)                       System.out.println(date);   
6)                       int dd = date.getDayOfMonth();   
7)                       int mm = date.getMonthValue();   
8)                       int yy = date.getYear();   
9)                       System.out.println(dd+"..."+mm+"..."+yy);   
10)                       System.out.printf("\n%d-%d-%d",dd,mm,yy);   
11)     }    
12) }   
Once we get LocalTime object we can call the following methods on that object. 
Ex: 
1) importJava.time.*;   
2) class Test {   
3)     public static void main(String[] args)   {   
4)         LocalTime time = LocalTime.now();   
5)         int h = time.getHour();   
6)         int m = time.getMinute();   
7)         int s = time.getSecond();   
8)         int n = time.getNano();   
9)         System.out.printf("\n%d:%d:%d:%d",h,m,s,n);     
10)     }    
11) }   
If we want to represent both Date and Time then we should go for LocalDateTime object. 
LocalDateTimedt = LocalDateTime.now(); 
System.out.println(dt); 
O/p: 2015-11-23T12:57:24.531  


We can represent a particular Date and Time by using LocalDateTime object as follows. 
Ex:         
LocalDateTime dt1 = LocalDateTime.of(1995,Month.APRIL,28,12,45);         
sop(dt1);  
Ex:             
LocalDateTime dt1=LocalDateTime.of(1995,04,28,12,45);             
Sop(dt1);             
Sop(“After six months:”+dt.plusMonths(6));             
Sop(“Before six months:”+dt.minusMonths(6)); 





To Represent Zone: 
ZoneId object can be used to represent Zone. 
Ex: 
1) import Java.time.*;   
2) class ProgramOne {   
3)             public static void main(String[] args) {   
4)                      ZoneId zone = ZoneId.systemDefault();   
5)                      System.out.println(zone);   
					}
	}
We can create ZoneId for a particular zone as follows 
Ex:            
ZoneId la = ZoneId.of("America/Los_Angeles");            
ZonedDateTime zt = ZonedDateTime.now(la);            
System.out.println(zt); 

Period Object: 
Period object can be used to represent quantity of time 
Ex:              
LocalDate today = LocalDate.now();              
LocalDate birthday = LocalDate.of(1989,06,15);              
Period p = Period.between(birthday,today);            
System.out.printf("age is %d year %d months %d days",p.getYears(),p.getMonths(),p.getDays());  

Write a program to check the given year is leap year or not
import Java.time.*;   
2) public class Leapyear {   
3)     int n = Integer.parseInt(args[0]);   
4)     Year y = Year.of(n);   
5)     if(y.isLeap())   
6)               System.out.printf("%d is Leap year",n);   
7)     else   
8)               System.out.printf("%d is not Leap year",n);   
9) }   

