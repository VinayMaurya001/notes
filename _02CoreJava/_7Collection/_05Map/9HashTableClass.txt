HashTable
Underlying DS is HashTable.
Insertion Order is not preserved & it is based on hashCode of key
Duplicate keys are not allowed but values can be duplicated.
Heterogeneous objects are allowed for key & value both
Null is not allowed for both key & value otherwise we will get NPE.

It is Serializable & Cloneable but not RandomAccess.
Every method present in HashTable is synchronized & hence HashTable object is Thread-safe.
Best choice if frequent operation is search operation.

Constructors of HashTable
Hashtable  h=new Hashtable();
		Default initial capacity:11
		Default Fill radio=load factor=0.75
HashTable h=new HashTable(int initialcapacity);
HashTable h=new HashTable(int initialcapacity, float loadfactor);
Fill radio=load factor
HashTable h=new HashTable(Map  c)


Difference b/w HashMap & HashTable
Methods are Not synchronized
	Methods are Synchronized
Multiple threads are allowed to operate. Hence not thread safe.
	Thread safe
High performance
	Low performance
Null is allowed for key(only once) & value both
	Null is not allowed for key & value both.
Not legacy (1.2v)
	Legacy (1.0v)
Default initial capacity:16
		Default initial capacity:11

Note:
1)From top to bottom
From right to left
2)
 Bucket entry based on hashCode of key(like if key=23 and bucket size=11 then bucket entry will be 23%11=1,
 here 1 is index of bucket which is based on 0 index ).
 
3)
package _7Collection._5Map;
import java.util.Hashtable;
public class HashTableDemo {
	public static void main(String[] args) {
		m1();
	}
	private static void m1() {
		Hashtable ht = new Hashtable();
		ht.put(new Student(5), "A");
		ht.put(new Student(2), "B");
		ht.put(new Student(6), "C");
		ht.put(new Student(15), "D");
		ht.put(new Student(23), "E");
		ht.put(new Student(16), "F");
		ht.put(new Student(1), "G");
		System.out.println(ht);//{6=C, 16=F, 5=A, 15=D, 2=B, 1=G, 23=E}
	}
}

class Student {
	int id;
	public Student(int id) {
		super();
		this.id = id;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	@Override
	public int hashCode() {
		// final int prime = 31;
		// int result = 1;
		// result = prime * result + id;
		// return result;
		return id;
		// return id%9;
	}

	// @Override
	// public boolean equals(Object obj) {
	// if (this == obj)
	// return true;
	// if (obj == null)
	// return false;
	// if (getClass() != obj.getClass())
	// return false;
	// Student other = (Student) obj;
	// if (id != other.id)
	// return false;
	// return true;
	// }

	@Override
	public String toString() {
		return "" + id;
	}
}

