



https://stackoverflow.com/questions/6267138/spring-autowire-a-list
https://www.baeldung.com/spring-injecting-collections


@SpringBootApplication
@ComponentScan
@EnableAutoConfiguration 
	It is used for auto-configuring beans present in the classpath in Spring Boot applications.
@Configuration
	Indicates that a class declares one or more @Bean methods 
		and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime,
@Bean
@Component vs @Bean
	@Component is a class-level annotation, but @Bean is at the method level, 
		so @Component is only an option when a class's source code is editable. @Bean can always be used, but it's more verbose.
	@Component is compatible with Spring's auto-detection, 
		but @Bean requires manual class instantiation.
	Using @Bean decouples the instantiation of the bean from its class definition. 
		This is why we can use it to make even third-party classes into Spring beans. 
		It also means we can introduce logic to decide which of several possible instance options for a bean to use.
@Component
@Controller, @Service and @Repository

DI
	https://www.baeldung.com/spring-annotations-resource-inject-autowire
		@Autowired
			Field Injection & Setter Injection
				Match by Type
				Match by Qualifier
				Match by Name
		@Inject
			Field Injection & Setter Injection
				Match by Type
				Match by Qualifier
				Match by Name
		@Resource
			Field Injection	& Setter Injection
				Match by Name
				Match by Type
				Match by Qualifier
	https://www.baeldung.com/constructor-injection-in-spring	

	@Qualifier
	@Primary


@Configuration
	https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html
	@Import(DatabaseConfig.class)
	@ConfigurationProperties
	@PropertySource("classpath:config.properties")
	@Value



@Profile("production")
