public class DemoBean implements InitializingBean, DisposableBean
	{
		//Other bean attributes and methods 
		@Override
		public void afterPropertiesSet() throws Exception
		{
			//Bean initialization code
		}
		@Override
		public void destroy() throws Exception
		{
			//Bean destruction code
		}
	}
Aware Interfaces to Add Specific Behavior
	Spring offers a range of interfaces that allow the beans to indicate to the container that they require a particular infrastructure dependency.
@PostConstruct and @PreDestroy Annotations
	@PostConstruct annotated method will be invoked after the bean has been constructed using default constructor and just before itï¿½s instance is returned to requesting object.
	@PreDestroy annotated method is invoked just before the bean is about be destroyed inside bean container.

https://stackoverflow.com/questions/6267138/spring-autowire-a-list
https://www.baeldung.com/spring-injecting-collections


@SpringBootApplication
@ComponentScan
@EnableAutoConfiguration 
	It is used for auto-configuring beans present in the classpath in Spring Boot applications.
@Configuration
	Indicates that a class declares one or more @Bean methods 
		and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime,
@Bean
@Component vs @Bean
	@Component is a class-level annotation, but @Bean is at the method level, 
		so @Component is only an option when a class's source code is editable. @Bean can always be used, but it's more verbose.
	@Component is compatible with Spring's auto-detection, 
		but @Bean requires manual class instantiation.
	Using @Bean decouples the instantiation of the bean from its class definition. 
		This is why we can use it to make even third-party classes into Spring beans. 
		It also means we can introduce logic to decide which of several possible instance options for a bean to use.






@Configuration
	https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html
	@Import(DatabaseConfig.class)
	@ConfigurationProperties
	@PropertySource("classpath:config.properties")
	@Value



@Profile("production")
