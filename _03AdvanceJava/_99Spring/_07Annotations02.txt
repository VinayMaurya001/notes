

@SpringBootApplication
	@SpringBootConfiguration
	@EnableAutoConfiguration
	@ComponentScan
	@EnableWebMvc (optional)
	

@Component
@Controller
@Service
@Repository

@Scope("singleton")
	Scope("prototype")
	Scope("request")
	Scope("session")
	Scope("application")



@Autowired
@Qualifier("specificRepository")
@Primary
@Value

@Profile("dev")
	spring.profiles.active=dev
	java -jar your-application.jar -Dspring.profiles.active=dev

@RestController
	@Controller and @ResponseBody
@RequestMapping
	GetMapping, @PostMapping, @PutMapping, @DeleteMapping
@PathVariable
@RequestParam
@RequestBody
@ResponseBody


@Value("${my.property}")
	@ConfigurationProperties(prefix = "my")
	@EnableConfigurationProperties:
		Enable@ConfigurationProperties annotated classes

	private final Environment environment;
	public MyService(Environment environment) {
        	his.environment = environment;
    	}
	public void someMethod() {
        	tring myProperty = environment.getProperty("my.property");
        }

	Use @Value for simple cases with a small number of properties.
	Use@ConfigurationProperties for structured, type-safe configuration in larger applications.
	Use Evironment when fine-grained control over property retrieval is required or when dealing with dynamic or non-standard properties.

@PropertySource:
	Spcifies the properties file to be used for configuration



@SpringBootTest
	Used to create a Spring context for integration testing.
	Load the entire application context
@DataJpaTest, @WebMvcTest, @RestClientTest:
	Slicetesting annotations for specific layers of the application
@TestPropertySource
Specifies additional property sources for testing.
@TestConfiguration
Used to define additional configuration classes for testing





@ConditionalOnProperty(name = "custom.feature.enabled", havingValue = "true")
@ConditionalOnClass(name = "org.springframework.web.servlet.DispatcherServlet")

Spring Boot Externalized Configuration
    Common Sources for Externalized Configuration:
	Application Properties and YAML Files:
		The primary source for configuration properties.
	Profile-Specific Files
		Allows customization based on different environments.
	Command Line Arguments
		Provide a quick way to override configuration.
		java -jar myapp.jar --server.port=9090
	Environment Variables
		Useful in containerized or cloud environments
		export CUSTOM_FEATURE_ENABLED=false


@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
	spring.autoconfigure.exclude:=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
	


@ComponentScan
@EntityScan
@EnableJpaRepositories