@Configuration
@Bean

@Configuration
@Component
@ComponentScan

@Configuration
@Component
@ComponentScan
@Primary

@Configuration
@Component
@ComponentScan
@Primary
@Qualifier("aaa")
Ways to use Qualifier
	1)@Qualifier("anything") on bean class and  @Qualifier("anything") on field or method parameter
	2)@Qualifier("nameOfBean") on field or method parameter	
	@Primary - A bean should be given preference when multiple candidates are qualified
	@Qualifier - A specific bean should be auto-wired (name of the bean can be used as qualifier)
		ALWAYS think from the perspective of the class using the SortingAlgorithm:
		1: Just @Autowired: Give me (preferred) SortingAlgorithm
		2: @Autowired + @Qualifier: I only want to use specific SortingAlgorithm - RadixSort
		(REMEMBER) @Qualifier has higher priority then @Primary

		
@Component (..): 
	An instance of class will be managed by Spring framework
Dependency: 
	GameRunner needs GamingConsole impl!
	GamingConsole Impl (Ex: MarioGame) is a dependency of GameRunner
Component Scan: 
	How does Spring Framework find component classes?
	It scans packages! (@ComponentScan("com.package.name"))


	
@Component vs @Bean
Where? 
	Can be used on any Java class 
	Typically used on methods in Spring Configuration classes
Ease of use 
	Very easy, Just add an annotation. 
	You write all the code.
Autowiring 
	Yes - Field, Setter or Constructor Injection 
	Yes - method call or method parameters
Who creates beans?
	Spring Framework 
	You write bean creation code
Recommended For 
	Instantiating Beans for Your Own Application Code: @Component
	1:Custom Business Logic
	2: Instantiating Beans for 3rd-party libraries: @Bean
Beans per class?
	One (Singleton) or Many (Prototype) 
	One or Many - You can create as many as you want