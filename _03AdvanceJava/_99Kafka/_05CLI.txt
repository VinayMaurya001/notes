Kafka CLI
	They come bundled with the Kafka Binaries.
	If we setup $PATH variable correctly(from the Kafka setup part), then we should be able to invoke the CLI from anywhere on our computer.
	
	kafka-topics.sh (If we installed Kafka using binaries)
	kafka-topics.bat(Windows non WSL2)
	kafka-topics (homebrew, apt...)
	
	use the --bootstrap-server option everywhere , not --zookeeper
		kafka-topics --bootstrap-server localhost:9092
		kafka-topics --zookeeper        localhost:2181	
		
		
	WINDOWS NON-WSL2 USERS PLEASE READ
		In the next lecture, do not run the command to DELETE topics
		Because of a bug here: https://issues.apache.org/jira/browse/KAFKA-1194, it doesn't work. 
			I'm actively working with the Kafka Dev team to see if I can get this fixed.
		
	
Kafka Topic Management
	Create Kafka Topics
	List Kafka Topics
	Describe Kafka Topics
	Increase partitions in Kafka Topics
	Delete Kafka Topics
	

	kafka-topics command
		As of Kafka 2.2, instead of --zookeeper 127.0.0.1:2181, we can use : --bootstrap-server 127.0.0.1:9092
		kafka-topics --zookeeper 127.0.0.1:2181 --list 
		kafka-topics --bootstrap-server 127.0.0.1:9092 --list

		kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic first_topic --create
		
		kafka-topics --bootstrap-server 127.0.0.1:9092 --list 
		kafka-topics --bootstrap-server 127.0.0.1:9092 --topic first_topic --describe

		#We cannot create a topic replication-factor greater than no of broker available
		kafka-topics --bootstrap-server 127.0.0.1:9092 --topic second_topic --create --partitions 3 --replication-factor 1

		By default delete.topic.enable is true.
		This command should not be used in window environment.
		kafka-topics.sh ---bootstrap-server 127.0.0.1:9092 --topic first_topic --delete

		https://cnr.sh/essays/how-paint-bike-shed-kafka-topic-naming-conventions
	
		Topic Naming Conventions
			Naming a topic is free-for-all
			It is better to enforce guidelines in cluster to ease management
			You are free to come up with your guideline

			A blog post
			https://cnr.sh/essays/how-paint-bike-shed-kafka-topic-naming-conventions
			<messageType>.<datasetName>.<dataName>.<dataFormat>
			Message Type
				logging
				queuing
				tracking
				etl/db
				streaming
				push
				user

			The dataset name is analogous to a database name in traditional RDBS systems. It is used as a category to group topics together
			The data name field is analogous to a tbale name in traditional RDBMS systems, though it is fine to include further dotted notation if developers wish to impose their own heirarchy within the dataset namespace.

			The data format for example .avro, .json, .text, .protobuf, .csv, .log
			Use snake_case
	
Kafka Console Producer CLI
	1. Produce without keys
			Data will be distributed with all partitions
	2. Produce with keys
	
kafka-console-producer --bootstrap-server 127.0.0.1:9092 --topic first_topic 
kafka-console-producer --broker-list 127.0.0.1:9092 --topic first_topic 
hello stephane
awesome course
learning kafka
just another message

# producing with properties
kafka-console-producer --broker-list 127.0.0.1:9092 --topic first_topic --producer-property acks=all
some message that is acked
just for fun
fun learning!

# overall, please create topics before producing to them!
# producing to a non existing topic
# our new topic only has 1 partition
kafka-console-producer --broker-list 127.0.0.1:9092 --topic new_topic
hello world!


# edit config/server.properties
# num.partitions=3

# produce against a non existing topic again
kafka-console-producer --broker-list 127.0.0.1:9092 --topic new_topic_2
hello again!

# this time our topic has 3 partitions
kafka-topics --zookeeper 127.0.0.1:2181 --list
kafka-topics --zookeeper 127.0.0.1:2181 --topic new_topic_2 --describe

Producer with keys
kafka-console-producer --broker-list 127.0.0.1:9092 --topic first_topic --property parse.key=true --property key.separator=,
> key,value
> another key,another value






Kafka Console Consumer CLI
	1.Consume from tail of the topic
		kafka-console-consumer --bootstrap-server 127.0.0.1:9092 --topic first_topic
	2.Consume from beginning of the topic
		kafka-console-consumer --bootstrap-server 127.0.0.1:9092 --topic first_topic --from-beginning
	3.Show both key & values in the output
		Consumer with keys
			kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic first_topic --from-beginning --property print.key=true --property key.separator=,
		# display key, values and timestamp in consumer
			kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic first_topic --formatter kafka.tools.DefaultMessageFormatter --property print.timestamp=true --property print.key=true --property print.value=true --from-beginning



Kafka Console Consumer in Groups
	# --group parameter
		kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic first_topic --group my-first-application

	See how partitions read are divided amongst multiple CLI consumers
	# start another consumer part of the same group. See messages being spread
		kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic first_topic --group my-first-application

		It will not read from beginning if offset has been set diff point 
		kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic first_topic --group my-first-application --from-beginning

	# start another consumer part of a different group from beginning
	It will also read value from all partitions
		kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic first_topic --group my-second-application --from-beginning






Consumer Group Management CLI
	By default a consumer group created for a consumer & deleted if consumer stopped.
	1.List consumer groups
		kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list
	2.Describe one consumer group
		kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group my-second-application
		kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group console-consumer-10592
	3.Delete a consumer group
	
 
 
 
Resetting Offsets
# look at the documentation again
kafka-consumer-groups

# reset the offsets to the beginning of each partition
We cannot reset offset if any consumer is running for that consumer groups.
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group my-first-application --reset-offsets --to-earliest

# execute flag is needed
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group my-first-application --reset-offsets --to-earliest --execute

# topic flag is also needed
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group my-first-application --reset-offsets --to-earliest --execute --topic first_topic

# consume from where the offsets have been reset
kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic first_topic --group my-first-application

# describe the group again
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group my-first-application

# documentation for more options
kafka-consumer-groups.sh

# shift offsets by 2 (forward) as another strategy
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group my-first-application --reset-offsets --shift-by 2 --execute --topic first_topic

# shift offsets by 2 (backward) as another strategy
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group my-first-application --reset-offsets --shift-by -2 --execute --topic first_topic

# consume again
kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic first_topic --group my-first-application 