Kafka Brokers
	A Kafka cluster is composed of multiple brokers(servers)
	Each broker is identified with its ID(integer)
	Each broker contains certain topic partitions.
	After connecting to any broker(called a bootstrap broker), we will be connected to entire cluster(Kafka clients have smart mechanics for that)
	A good number to get started is 3 brokers, but some big clusters have 100s brokers.
	


Broker & Topics
	Data id distributed
	Horizontal Scaling is easy.
	Example:
		Broker101
			Topic-A Partition-0
			Topic-B Partition-1
		Broker102
			Topic-A Partition-1
			Topic-B Partition-0
		Broker103
			Topic-A Partition-2
			
Kafka Broker Discovery
	Every Kafka broker is aslo called a "bootstrap server"
	That means that we need to only connect to one broker & Kafka client will know how to be connected to the entire cluster(smart clients)
	Each broker knows about all brokers , topics & partitions(metadata)
	
	
Topic Replication factor
	Topic should have a replication factor >1 (usually between 2 & 3)
	This way if a broker is down, another broker can serve the data
	Example:
		Broker101
			Topic-A Partition-0(Leader)
		Broker102
			Topic-A Partition-1(Leader)
			Topic-A Partition-0 (ISR-In-Synch replica)
		Broker103
			Topic-A Partition-1 (ISR-In-Synch replica)
	
	
Concept of a Leader for a partition
	At a one time only one broker can be a leader for a given partition.
	Producers can only send data to the broker that is leader of a partition.
	The other brokers will replicate the data.
	Therefore, each partition has one leader & multiple ISR(In-Synch replica)
	
	
Default producer & consumer behaviour with Leaders
	Kafka producers can only write to the leader broker for a partition
	Kafka consumers by default will read from the leader broker for a partition
	
Kafka Consumers Replica Fetching (Kafka v2.4+)
	Since Kafka v2.4+, it is possible to configure consumers to read from the closest replica
	This may help improve latency & also decrease network costs if using the cloud
	
	
Producer Acknowledgement & Topic Durability
	Producers can choose to recieve acknowledgement of data writes
	acks=0,producer won't wait for acknowledgement(possible data loss)
	acks=1,producer will wait for leader acknowledgement(limited data loss)
	acks=all, leader + replicas acknowledgement(no data loss)
	
	
	
Kafka Topic Durability
	For a topic replica factor of 3, topic data durability can withstand 2 brokers loss.
	As a rule, for a replication factor of N, we can permanently lose upto N-1 brokers & still recover our data
	
