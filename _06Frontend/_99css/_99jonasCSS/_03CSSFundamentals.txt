CSS
	Csacading Style Sheets
CSS Rule
	Selector
	{		//Declaration Block
			Property:value   /Declaration/Style
	}
	
	
	
Comment
body {
  /* background-color: blue; */
}
	
	
Inline CSS
	<h1 style="color:blue">The Code Magazine</h1>
	We should never use it.
Internal CSS
  <head>
	<style>
      h1 {
        color: blue;
      }
    </style>
  </head>
  Separation of Concerns
  		Keep different things at separate places		
External CSS
	<head>
    	<link href="style.css" rel="stylesheet" />
    </head>
	Inside style.css
		      h1 {
       			 color: blue;
      		  }	


Styling Text
h1 {
  font-size: 26px;
  font-family: sans-serif;
  font-style: italic;
  font-weight: bold;
  text-transform: uppercase;
  text-align: center;
  line-height: 1.5;
  letter-spacing:2px;
}	



Element selectors
Combining Selectors
	h1,h2,h3,h4,p,li {
	  font-family: sans-serif;
	}
Decendent selector
	article header p { 
	  font-style: italic;
	}
This essentially encodes the HTML structure into our CSS selector, and that is not a good idea. 
		And thats why we should use id & class selectors.
		In the real world we simply always use classes (not even id )even if we only use the class name once.
			Because by doing that, we are making our code ready for the future and ready for potential changes.


Id & class Selectors
	/* footer p {
	  font-size: 20px;
	} */
	#copyright {
	  font-size: 16px;
	}
	We are not allowed to repeat Id names in a html page, while we may repeat class name.
	.related-author {
	  font-size: 18px;
	  font-weight: bold;
	}
	.related-list {
	  list-style: none; // remove bullet points before the list items
	}

    <ul class="related-author related-list">



Working with Colors in CSS
1)Using Name
2)RGB/RGBA notation(0 to 255)
	Regular RGB model
		rgb(0,255,255)
		black- rgb(0,0,0)
		grey- rgb(183,183,183) - when colors in all 3 channels are same, we get a grey color
		white- rgb(255,255,255)
	RGB with Transparency("alpha") -The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).
		rgba(0,255,255,0.3)
3)Hexadecimal Notation(0 to ff)
		#00ffff
		#0ff (shorthand, when all colors are identical)
In practice, we mostly use hexadecimal colors & rgbs when we need transparency
In VisualStudioCode, we can pick color  from color pallete
h3 {
  color: #1098ad;
}
aside {
  background-color: #f7f7f7;
  border-top: 5px dashed #1098ad;
  border-bottom: 5px dashed #1098ad;
  border-left: 5px solid #1098ad;
  border-right: 5px solid #1098ad;
}



Pseudo-classes
	li:first-child {
	  font-weight: bold;
	}
	li:last-child {
	  font-weight: lighter;
	}
	li:nth-child(3) {
	  color: blue;
	}
	li:nth-child(odd) {
	  color: blue;
	}
	article p:first-child{  /* Here p should be firstchild of article otherwise it won't work*/
	  color: blue;
	}



Styling Hyperlinks using Pseudo-classes
	LVHA- Link, Visited, Hover, Active
	The four links states are:
		a:link - a normal, unvisited link
		a:visited - a link the user has visited
		a:hover - a link when the user mouses over it
		a:active - a link the moment it is clicked
	a:link { /* a tag with href attribute*/
	  color: #1098ad;
	  text-decoration: none;
	}
	a:visited {
	  /* color: #ff0000; */
	  color: #1098ad;
	}
	a:hover {
	  color: orangered;
	  font-weight: bold;
	  text-decoration: underline orangered;
	  text-decoration: underline dotted orangered;
	}
	a:active {
	  background-color: green;
	  font-style: italic;
	}



CSS Theory1:Conflicts Between Selectors
	> Declaration marked !important
	> inline style 
	> id(#)selector 
	> class(.) or pseudo-class(:) selector  
	> element (p,h1) selector 
	> universal(*) selector
	
	If same priority, then it is the last one that applies
	
	footer p {
	  color: green !important;  /*!important sholud be used only as last resort */
	} 
	
	cascade and selector specificity
		https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity
		Selector Specificity: (1, 0, 0)
		Selector Specificity: (0, 1, 0)
		Selector Specificity: (0, 0, 2)



CSS Theory2: Inheritance & the Universal Selector
Not all properties get inherited. It is mostly the ones that are about text: 
	font-family, font-size, font-weight, font-style, color, line-height, letter-spacing, text-align, text-transform, text-shadow, list-style, etc.
body {
  font-family: sans-serif;
  color: #444;
  border-top: 10px solid #1098ad;  // not inherited
}
Universal selector(*)
	The universal selector simply selects every single element on the page.
	And so this is useful if we actually want a certain property applied to all elements, but which does not get inherited.
	*{
		color: #444;
		border-top: 10px solid #1098ad;
	}
Universal selector vs body selector.
	The universal selector simply applies to all the elements, and there is no inheritance involved,
		and therefore, this is perfect if you want to apply a certain property that does not automatically get inherited to all the elements.
	On the other hand, any style(offcourse style that are eligible for inheritance like font-family ) that we put here in the body gets inherited.
		And so that's simply a completely different mechanism than using the universal selector.



Challenge1
https://codepen.io/jonasschmedtmann/pen/zYNyMJL/256706a9de79baf1bd19abcb68e820d9



CSS Theory 3: The CSS Box Model
	Margin
	Border
	Padding
	Content

	Element- Border+Padding+Content
	Fill Area-Area that gets filled with background color or background image
	Final element width=left border+left padding+width+right padding+right border
	
	
	
Using Margins & Paddings
	padding: 20px;
	padding: 20px 40px; //20px for top & bottom and 40px for left & right
	padding: 10px 20px 30px 40px //
	padding-left: 10px;
	padding-right: 30px;
	
	//Recommended
	padding: 20px 40px; //Normally horizontal padding twice of vertical padding looks good

	margin: 20px;
	margin: 20px 30px; //20px for top & bottom and 30px for left & right
	margin: 10px 20px 30px 40px //
	margin-left: 10px;
	margin-right: 30px;
	
	margin:0; //not 0px
	
	//Recommended
	*{
		margin:0;  // will aslo remove bullet from list so we need to add margin-left for list(ul,ol)
		padding:0;
	}
	
	//Recommended
	For vertical space use only margin-bottom or margin-top not both.
	
	Collapsing margins:
		When we have two margins that occupy the same space, 
		only one of them is actually visible on the page.
		And that is usually the larger of the two.
	
	Whenever you need some space inside of an element, 
		which is very useful mostly when there is a background color or a border on the element, 
		then you always use padding.
	On the other hand,in order to create space outside of an element,
		or also to create space between multiple elements,
		always use margin.
		
	
		
Add dimensions
	Height & Width effect the content 
	
	width:20px;
	height:10px;
	
	width:20px;
	height:auto;	
	
	width:80%;   //% is usually the percentage of the width of the parent container
	height:auto;
	
	
Centering our page
	width:700px;
	margin-left:auto;
	margin-right:auto;
	//margin : 0, auto;
	
	
	
CSS Theory 4: Type of Boxes
	1)Block Boxes- 
		Elements occupy 100% of parent element's width, no matter the content
		Applies CSS Box Model
		display: block
	2)Inline Boxes- 
		Box model applies in a different ways:
			a)heights & widths do not apply
			b)paddings & margins are applied only horizontally(left & right)
		Example-strong,em, span,a, button,etc
		display: inline
	3)Inline-Block Boxes
		Looks like inline from the outside, behaves like block level on the inside
		Occupies only content’s space
		Causes no line-breaks
		Box-model applies -
			we can still set heights and width and we can still use margins and paddings
		Example-img
		display: inline-block
	
		

CSS Theory 5:Absolute Positioning
	Normal FLow vs Absolute Positioning
	Normal Flow
		position: relative
		Default positioning
		Element is “in flow”
			Elements are simply laid out according to their order in the HTML code
	Absolute Positioning
		position: absolute
		Element is removed from the normal flow: “out of flow
		No impact on surrounding elements, might overlap them
		We use top, bottom, left, or right to offset the element from its relatively positioned container
		
		.el {
			 position: absolute;
			 top: 100px;
			 left: 200px;
			 background-color: #f4b33f;
		}
		.container {
			 position: relative;  // first parent element that has position set to relative.
			 background-color: #f7e6c1;
		}	
	We use absolute positioning for single elements like this button or other small things.
	But in the real world, we don't use this much for example, to position this menu here, like on the top of the page
	For those things, we will actually use special techniques for building layouts.
		
	
		
Pseudo-elements
	Pseudo-elements are essentially elements that don't exist in the HTML but that we can still select and style in CSS.
	Example-
		The first letter of a paragraph or the first line of a paragraph
		
	h1::first-letter{
	  font-style:normal;
	  font-size:80px
	}
	p::first-line{
		color:red;
	}
	h2::after{
	  content:"TOP";
	  position:absolute;
	  top=0;
	  right:-20px;
	}	
	
	Adjacent element/sibling selector
	   h3+p::first-line{
		color:red;
	   }