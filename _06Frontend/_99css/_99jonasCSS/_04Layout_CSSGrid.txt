CSS Grid
	CSS Grid is a set of CSS properties for building 2-dimensional layouts
	The main idea behind CSS Grid is that we divide a container element into rows and columns that can be filled with its child elements
	In two-dimensional contexts, CSS Grid allows us to write less nested HTML and easier-to-read CSS
	CSS Grid is not meant to replace flexbox! Instead, they work perfectly together. 
		Need a 1D layout? Use flexbox. Need a 2D layout? Use CSS Grid.
	
BASIC CSS GRID TERMINOLOGY
	Grid container
	Grid Items

	Row axis
	Column Axis
			
	Grid Lines
	Grid track/row
	Grid track/column
	Gutters(Gaps)
	Grid cell(might be filled by a grid item or not)

	display:grid;

	
Grid container
	1)grid-template-rows: <track size>*
	  grid-template-columns: <track size>*
	  To establish the grid row and column tracks. One length unit for each track. 
	  Any unit can be used, new fr fills unused space
	2)gap: 0 | <length>
		row-gap: 0 | <length>
		column-gap: 0 | <length>
		To create empty space between tracks
	3)justify-items: stretch | start | center | end
	  align-items: stretch | start | center | end
		To align items inside rows / columns (horizontally / vertically)
	4)justify-content: start | start | center | end | ...
	  align-content: start | start | center | end | ...
		To align entire grid inside grid container. Only applies if container is larger than the grid


Grid Items
	1)grid-column: <start line> / <end line> | span <number>
	  grid-row: <start line> / <end line> | span <number>
		To place a grid item into a specific cell, based on line numbers.
		span keyword can be used to span an item across more cells
		
		grid-row: 1 / 2; //or  grid-row: 1;
  		grid-row: 1 / 3; //or  grid-row: 1 / span 2;
  		grid-column: 3 / -1; //from 3 to last column
  
	2)justify-self: stretch | start | center | end
	  align-self: stretch | start | center | end
		To overwrite justify-items / align-items for single items
	
	
/* CSS GRID */
  display: grid;

  grid-template-columns: 200px 200px 1fr 1fr auto;
  grid-template-rows: 300px 200px;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: 1fr 1fr;

  /* gap: 30px; */
  column-gap: 20px;
  row-gap: 40px;
  
  
  
  /* Aligning tracks inside container: distribute empty space */
  justify-content: center;
  /* justify-content: space-between; */
  align-content: center;

  /* Aligning items INSIDE cells: moving items around inside cells */
  align-items: end;
  justify-items: end;
  
  
  