Factory Method Pattern
	Hides the object creation process, create & return object.
	It is a creation design pattern.
	
Example:
	DriverManager.getConnection("url");
	DriverManager is a factory.
	getConnection() is a factory method.
PizzaTest.java


public class FactoryDesinPattern {

	public static void main(String[] args) {
		Bank bank = BankFactory.getBank("H");

		System.out.println(bank);
	}

}

class BankFactory {
	public static Bank getBank(String bankName) {
		switch (bankName) {
		case "H":
			return new HDFC();
		case "I":
			return new ICICI();
		}
		return null;
	}
}

interface Bank {

}

class HDFC implements Bank {

}

class ICICI implements Bank {

}


Factory Method Pattern
Factory pattern is one of the most used design patterns in Java. 
This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.

In Factory pattern, we create object without exposing the creation logic to the client and 
	refer to newly created object using a common interface.

????
A Factory Pattern or Factory Method Pattern says that just define an interface or abstract class for creating an object 
	but let the subclasses decide which class to instantiate. In other words, subclasses are responsible to create the instance of the class.
The Factory Method Pattern is also known as Virtual Constructor.

Factory Pattern(Design Pattern) : It may use configuration file to create object in spring. 

Advantage of Factory Design Pattern
Factory Method Pattern allows the sub-classes to choose the type of objects to create.
It promotes the loose-coupling by eliminating the need to bind application-specific classes into the code. 
	That means the code interacts solely with the resultant interface or abstract class, 
		so that it will work with any classes that implement that interface or that extends that abstract class.

Usage of Factory Design Pattern
When a class doesn't know what sub-classes will be required to create
When a class wants that its sub-classes specify the objects to be created.
When the parent classes choose the creation of objects to its sub-classes.

UML for Factory Method Pattern
FactoryPatternDemo, our demo class will use ShapeFactory to get a Shape object. 

It will pass information (CIRCLE / RECTANGLE / SQUARE) to ShapeFactory to get the type of object it needs.
	UML_FactoryMethodPattern.JPG

A Real World Example of Factory Method
Example: FactoryPatternDemo.java





